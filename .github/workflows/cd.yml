name: Continuous Deployment

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: iris-cluster
  GKE_ZONE: us-central1-a
  DEPLOYMENT_NAME: iris-api-deployment
  IMAGE: iris-api
  REGISTRY_LOCATION: us-central1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5  # Updated from v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v4  # Updated from v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest requests pytest-cov

    - name: Run tests with proper path
      run: |
        # Set MODEL_PATH to correct location for tests
        export MODEL_PATH="app/model.joblib"
        cd app
        python -m pytest ../tests/ -v --cov=. --cov-report=xml
      
    - name: Upload test results
      uses: actions/upload-artifact@v4  # Updated from v3
      if: always()
      with:
        name: test-results
        path: app/coverage.xml

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5  # Updated from v4
      with:
        python-version: '3.10'

    - name: Setup CML
      uses: iterative/setup-cml@v2  # Updated from v1

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2  # Updated from v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker to use gcloud
      run: |
        gcloud auth configure-docker $REGISTRY_LOCATION-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Build Docker image
      run: |
        cd app
        docker build -t "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA" .
        docker tag "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA" \
                   "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:latest"

    - name: Push Docker image
      run: |
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA"
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:latest"

    - name: Deploy to GKE
      run: |
        # Update deployment with project ID
        sed -i "s|PROJECT_ID|$PROJECT_ID|g" k8s/deployment.yaml
        
        # Apply deployment configuration
        kubectl apply -f k8s/deployment.yaml
        
        # Update the image
        kubectl set image deployment/$DEPLOYMENT_NAME \
          iris-api=$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA
        
        # Wait for rollout to complete
        kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=600s
        
        # Display service information
        kubectl get services -o wide

    - name: Verify deployment
      run: |
        # Check if all pods are ready
        kubectl wait --for=condition=ready pod -l app=iris-api --timeout=300s
        
        # Get deployment status
        kubectl get deployment $DEPLOYMENT_NAME -o jsonpath='{.status}'

    - name: Get service URL
      id: service-url
      run: |
        # Wait for external IP
        echo "Waiting for external IP..."
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service iris-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [[ -n "$EXTERNAL_IP" && "$EXTERNAL_IP" != "<pending>" ]]; then
            echo "SERVICE_URL=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
            echo "External IP: $EXTERNAL_IP"
            break
          fi
          echo "Waiting for external IP... ($i/30)"
          sleep 10
        done

    - name: Run smoke tests
      run: |
        SERVICE_URL="${{ steps.service-url.outputs.SERVICE_URL }}"
        if [[ -n "$SERVICE_URL" ]]; then
          echo "Testing deployment at: $SERVICE_URL"
          
          # Health check
          curl -f "$SERVICE_URL/health" || exit 1
          
          # Root endpoint
          curl -f "$SERVICE_URL/" || exit 1
          
          # Prediction test
          curl -X POST "$SERVICE_URL/predict/" \
            -H "Content-Type: application/json" \
            -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}' || exit 1
          
          echo "✅ All smoke tests passed!"
        else
          echo "⚠️ Could not get service URL, skipping smoke tests"
        fi

    - name: Generate CML report
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python .cml/cd-pipeline.py

  staging-deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5  # Updated from v4
      with:
        python-version: '3.10'

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2  # Updated from v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for staging
      run: |
        gcloud auth configure-docker $REGISTRY_LOCATION-docker.pkg.dev

    - name: Build and push staging image
      run: |
        cd app
        docker build -t "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA-staging" .
        docker tag "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA-staging" \
                   "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:staging"
        
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:$GITHUB_SHA-staging"
        docker push "$REGISTRY_LOCATION-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE:staging"

    - name: Deploy to staging cluster
      run: |
        # Connect to staging cluster (adjust cluster name as needed)
        gcloud container clusters get-credentials "iris-staging-cluster" --zone "$GKE_ZONE" || \
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
        
        # Create staging namespace if it doesn't exist
        kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy to staging
        sed -e "s|PROJECT_ID|$PROJECT_ID|g" \
            -e "s|iris-api-deployment|iris-api-staging|g" \
            -e "s|iris-api-service|iris-api-staging-service|g" \
            -e "s|:latest|:staging|g" \
            k8s/deployment.yaml > k8s/staging-deployment.yaml
        
        kubectl apply -f k8s/staging-deployment.yaml -n staging
        kubectl rollout status deployment/iris-api-staging -n staging --timeout=300s

    - name: Run staging integration tests
      run: |
        echo "Running staging integration tests..."
        # Add your staging-specific tests here
        kubectl get pods -n staging
        echo "✅ Staging deployment completed!"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-deploy, staging-deploy]
    if: always()
    
    steps:
    - name: Cleanup old images
      continue-on-error: true
      run: |
        echo "Cleanup step - implement if needed"
        # Add cleanup logic for old Docker images if needed
